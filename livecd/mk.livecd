#!/bin/bash

export DEBIAN_FRONTEND=noninteractive

if [ -r ./mk.livecd.conf ] ; then
    source ./mk.livecd.conf
else
    echo E: Missing mk.livecd.conf
    exit 1
fi

# process command line variable overrides
for arg ; do
    case "$arg" in
	--*=* )
	    arg=${arg#--}
	    eval ${arg%=*}=\"${arg#*=}\"
	    ;;
	*=* )
	    eval ${arg%=*}=\"${arg#*=}\"
	    ;;
    esac
done

declare pkglistdir=config/chroot_local-packageslists
declare -a exclude_packages=( ${EXCLUDE_PKGS[@]} )
declare -a include_packages=( ${FETCH_PKGS[@]/kernel/${VYATTA_LINUX_PKG}} )
declare -a local_packages=( ${BUILD_PKGS[@]/kernel/${VYATTA_LINUX_PKG}} )

: ${TIMESTAMP:=$(date -u +%y%m%d%H%M)}
: ${HUMANTIME:=$(date -u)}
: ${BUILDID:=$(tools/buildid)}
: ${CDLABEL:=$TIMESTAMP$BUILDID}
: ${LIVECD:=livecd/livecd_$CDLABEL.iso}
: ${BUILDFILE:=/opt/vyatta/etc/build.txt}
: ${STAGEBUILDFILE=chroot/$BUILDFILE}

if [[ $LD_PRELOAD == *libfakeroot-sysv.so* ]]; then
    # we are in fakeroot
    LH_OPTIONAL_FAKEROOT="--use-fakeroot enabled"
else
    LH_OPTIONAL_FAKEROOT=
fi

set_conf_var ()
{
  local conf=$1
  local var=$2
  local val=$3
  sed -i "s/^$var=\".*\"/$var=\"$val\"/" config/$conf
}

if [ ! -d config ]; then
  echo I: configuring build
  lh_config ${LH_OPTIONAL_FAKEROOT}

  # set up custom repo(s)
  if ls deb_sources/${LH_DISTRIBUTION}-*bootstrap* >& /dev/null; then
    cp deb_sources/${LH_DISTRIBUTION}-*bootstrap* config/chroot_sources/
  fi
 
  # set up custom pkg list(s)
  echo "# vyatta packages" > ${pkglistdir}/vyatta-pkgs
  cat deb_lists/default-pkglist >> ${pkglistdir}/vyatta-pkgs
  if ls deb_lists/${LH_DISTRIBUTION}-* >& /dev/null; then
    for list in deb_lists/${LH_DISTRIBUTION}-*; do
      cat $list >> ${pkglistdir}/vyatta-pkgs
    done
  fi

  # set up binary hook(s)
  cp hooks_binary/default-hooks config/binary_local-hooks/

  # set up grub template
  cp templates/grub/menu.lst config/binary_grub/

  # set up packages to be fetched
  if (( ${#include_packages[@]} > 0 )); then
    echo "${include_packages[*]}" >> ${pkglistdir}/vyatta-pkgs
  fi

  # and add packages to be removed
  for x in ${exclude_packages[@]} ; do
    echo $x- >>${pkglistdir}/vyatta-pkgs
  done
fi

# create the buildid file
mk_buildid ()
{
    echo I: generating package list
    [ -d chroot/opt/vyatta/bin ] || mkdir -p -m 0755 chroot/opt/vyatta/bin
    [ -d chroot/opt/vyatta/etc ] || mkdir -p -m 0755 chroot/opt/vyatta/etc
    cp tools/save-package-report chroot/opt/vyatta/bin
    chroot chroot /bin/sh /opt/vyatta/bin/save-package-report
    rm chroot/opt/vyatta/bin/save-package-report
    rm -f $STAGEBUILDFILE
    test -n "$BUILTBY" || BUILTBY=$GIT_COMMITTER_EMAIL
    test -n "$BUILTBY" || BUILTBY=$GIT_AUTHOR_EMAIL
    if test -z "$BUILTBY" ; then
	: ${ORGANIZATION:=vyatta.com}
	if test -n "$SUDO_USER" ; then
	    BUILTBY=$SUDO_USER@$ORGANIZATION
	else
	    BUILTBY=$USER@$ORGANIZATION
	fi
    fi
    cat <<-EOF >$STAGEBUILDFILE
	Built by:    $BUILTBY
	Built on:    $HUMANTIME
	Build ID:    $CDLABEL
	EOF
    echo "$CDLABEL">iso-label
}

# set up locally-built packages
rm -f config/chroot_local-packages/*
if (( ${#local_packages[@]} > 0 )); then
  for bpkg in ${local_packages[@]}; do
    cp -p ../*/${bpkg}*.deb config/chroot_local-packages/
  done
fi

if [ "$ISO_FAST" == "yes" ]; then
  # do a "fast" build. just install the local packages and then do lh_binary.
  # there may be problems if, for example, dependencies have changed, etc.
  rm -f .stage/chroot_local-packages .stage/binary_*
  
  # set vyatta archive priority to 50 so that remote packages are only
  # installed if not already installed locally.
  cat >chroot/etc/apt/preferences <<'EOF'
Package: *
Pin: release l=Vyatta
Pin-Priority: 50
EOF
  echo I: installing local packages
  lh_chroot_local-packages || return 1
  >chroot/etc/apt/preferences

  mk_buildid

  echo I: building binary
  if ! lh_binary; then
    echo E: binary build failed
    exit 1
  fi

  exit 0
fi

# clear .stage
# note: this causes all steps to be re-executed. however, the bootstrap stage
# is cached, so the bootstrap step only restores the cached stage.
rm -rf .stage

echo I: buidling bootstrap
if ! lh_bootstrap; then
  echo E: bootstrap build failed
  exit 1
fi

if [ -d cache/lists ] ; then
    echo I: Restore cached package lists
    cp -a cache/lists chroot/var/lib/apt/
fi

cp chroot_local-hooks/*[^~] config/chroot_local-hooks/

if eval "$use_xen" ; then
    echo I: Disabling TLS
    mv chroot/lib/tls chroot/lib/tls.disabled
else
    rm -f config/chroot_local-hooks/*xen*
fi

echo I: Adding live-bottom/*[^~]
mkdir -p -m 0755 chroot/usr/share/initramfs-tools/scripts/live-bottom/
cp live-bottom/*[^~] chroot/usr/share/initramfs-tools/scripts/live-bottom/

# do the steps in lh_chroot
build_chroot ()
{
  echo I: configuring chroot
  lh_chroot_cache restore || return 1
  lh_chroot_proc install || return 1
  lh_chroot_sysfs install || return 1
  lh_chroot_debianchroot install || return 1
  lh_chroot_dpkg install || return 1
  lh_chroot_sysv-rc install || return 1
  lh_chroot_hosts install || return 1
  lh_chroot_resolv install || return 1
  lh_chroot_hostname install || return 1
  lh_chroot_apt install || return 1
  lh_chroot_sources install || return 1

  # disable update-initramfs so that it isnot rerun in each pkg postinst
  # instead, run it once at the end
  if [ -x chroot/usr/sbin/update-initramfs ] ; then
    mv chroot/usr/sbin/update-initramfs chroot/usr/sbin/update-initramfs.real
    ln -s ../../bin/true chroot/usr/sbin/update-initramfs
  fi

  lh_chroot_linux-image install || return 1
  
  echo I: customizing live-initramfs
  if [ -x live_config/${LH_DISTRIBUTION}-config ]; then
    ./live_config/${LH_DISTRIBUTION}-config
  fi
  
  echo I: customizing chroot
  lh_chroot_preseed || return 1
  lh_chroot_local-preseed || return 1
  lh_chroot_tasks || return 1
  lh_chroot_packageslists || return 1
  lh_chroot_packages || return 1
 
  # we do local packages first since they are "newer".
  # set vyatta archive priority to 50 so that remote packages are only
  # installed if not already installed locally.
  cat >chroot/etc/apt/preferences <<'EOF'
Package: *
Pin: release l=Vyatta
Pin-Priority: 50
EOF
  lh_chroot_local-packages || return 1
  lh_chroot_local-packageslists || return 1
  >chroot/etc/apt/preferences

  lh_chroot_localization || return 1
  lh_chroot_local-includes || return 1
  lh_chroot_sysvinit || return 1
  lh_chroot_hooks || return 1
  lh_chroot_local-hooks || return 1
  lh_chroot_symlinks || return 1
  lh_chroot_hacks || return 1
  lh_chroot_interactive || return 1
 
  echo I: deconfiguring chroot
  lh_chroot_linux-image remove || return 1
  lh_chroot_sources remove || return 1
  lh_chroot_apt remove || return 1
  lh_chroot_hostname remove || return 1
  lh_chroot_resolv remove || return 1
  lh_chroot_hosts remove || return 1
  lh_chroot_sysv-rc remove || return 1
  lh_chroot_dpkg remove || return 1
  lh_chroot_debianchroot remove || return 1
  lh_chroot_sysfs remove || return 1
  lh_chroot_proc remove || return 1
  lh_chroot_cache save || return 1

  if [ -x chroot/usr/sbin/update-initramfs.real ] ; then
    rm -f chroot/usr/sbin/update-initramfs
    mv chroot/usr/sbin/update-initramfs.real chroot/usr/sbin/update-initramfs
  fi

  echo I: Update initramfs
  chroot chroot update-initramfs -t -u -k all

}

#echo I: building chroot
#if ! build_chroot; then
#  echo E: chroot build failed
#  exit 1
#fi

# we do local packages first since they are "newer".
# set vyatta archive priority to 50 so that remote packages are only
# installed if not already installed locally.
cat >chroot/etc/apt/preferences <<'EOF'
Package: *
Pin: release l=Vyatta
Pin-Priority: 50
EOF

# FIXME! integrate build_chroot
lh_chroot --verbose

cat /dev/null > chroot/etc/apt/preferences
mk_buildid

echo I: restoring ldd/ldconfig
if [ -f chroot/usr/bin/ldd.REAL ]; then
  rm -f chroot/usr/bin/ldd
  mv chroot/usr/bin/ldd.REAL chroot/usr/bin/ldd 
fi
if [ -f chroot/sbin/ldconfig.REAL ]; then
  rm -f chroot/sbin/ldconfig
  mv chroot/sbin/ldconfig.REAL chroot/sbin/ldconfig
fi

echo I: Cache Package files
cp -a chroot/var/lib/apt/lists cache/

declare -x MKSQUASHFS_OPTIONS="-no-progress -ef tmp/mksquashfs.exclude"
>chroot/tmp/mksquashfs.exclude
for b in chroot/var/lib/apt/lists/*_dists_* ; do
    echo ${b#chroot/}	>> chroot/tmp/mksquashfs.exclude
done
for b in chroot/boot/{vmlinuz-*,initrd.img-*} ; do
    echo ${b#chroot/}	>> chroot/tmp/mksquashfs.exclude
done

echo I: building binary
if ! lh_binary; then
  echo E: binary build failed
  exit 1
fi

echo I: Done

