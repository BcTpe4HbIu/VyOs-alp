#!/bin/bash

set -e

export DEBIAN_FRONTEND=noninteractive
#exort ftp_proxy= http_proxy= DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NOWARNINGS=yes XORG_CONFIG=custom

if [[ "$PATH" != */sbin* ]] ; then
    export PATH+=:/usr/local/sbin:/usr/sbin:/sbin
fi

toolsdir=`cd $PWD/../tools;pwd`
if [[ "$PATH" != *${toolsdir}* ]] ; then
    export PATH=${toolsdir}:$PATH
fi

if [ -r ./mk.livecd.conf ] ; then
    source ./mk.livecd.conf
else
    echo E: Missing mk.livecd.conf
    exit 1
fi

# process command line variable overrides
for arg ; do
    case "$arg" in
	--*=* )
	    arg=${arg#--}
	    eval ${arg%=*}=\"${arg#*=}\"
	    ;;
	*=* )
	    eval ${arg%=*}=\"${arg#*=}\"
	    ;;
    esac
done

declare -a xdebs debs pkgs depends

: ${HUMANTIME:=$(date -u)}
: ${ORGANIZATION:=vyatta.com}
: ${LANGUAGE:=${LH_LANGUAGE:-en}}
: ${LC_ALL:=C}
export LANGUAGE LC_ALL

BUILDID=`cat buildid 2>/dev/null` || true
if [ ! "$BUILDID" ]
then
    BUILDID=`git log -1 --pretty=format:%h 2>/dev/null` || true
    BUILDID=`date -u +%y%m%d%H%M`-${BUILDID}
fi

LH_ISO_VOLUME+=" -- $BUILDID"

mkdir -p cache

echo -e ${INCLUDE_PKGS//,/\\n}\\n ${EXCLUDE_PKGS//,/_\\n}- | \
    sort > cache/vyatta-pkgs

chroot_exclude_pattern=${EXCLUDE_PKGS//,/\|}\|linux-headers\*\|linux-source\*\|\*-dev
if [ "$VYATTA_INCLUDE_WEBGUI" != "yes" ]; then
  chroot_exclude_pattern+='|vyatta-webgui'
fi
binary_exclude_pattern=$chroot_exclude_pattern
binary_exclude_pattern+='|live-initramfs'

shopt -s extglob
shopt -s nullglob

declare -a deb_sources=( deb_sources/${LH_DISTRIBUTION}-*bootstrap* )

set_conf_var ()
{
  local conf=$1
  local var=$2
  local val=$3
  sed -i 's#^\('"$var"'\).*#\1="'"$val"'"#' config/$conf
}

if [[ $LD_PRELOAD == *libfakeroot-sysv.so* ]]; then
    export LH_USE_FAKEROOT=enabled
fi

echo I: cleaning earlier build
clean_mounts()
{
    for m in proc-live sysfs-live devpts-live ; do
        if grep -q $m /proc/mounts ; then
    	    echo I: unmounting $m
    	    umount $m || true
        fi
    done
}

trap "clean_mounts; exit 0" EXIT

clean_mounts
rm -rf binary binary.iso chroot config livecd-*.iso

echo I: fetching vyatta binary packages
mkdir -p cache/vyatta-deb-mirror
mkdir -p cache/vyatta-dists-mirror/binary-${LH_ARCHITECTURE}
touch cache/vyatta-dists-mirror/binary-${LH_ARCHITECTURE}/Packages

declare -a pkgs_in_vyatta_deb_mirror=($( \
    printf "%s\n" cache/vyatta-deb-mirror/*.deb | \
    sed -e 's,.*/,,; s,_.*,,' | \
    sort -u ))

declare -a selected_debs_from_vyatta_deb_mirror
for pkg in ${pkgs_in_vyatta_deb_mirror[@]} ; do
    deb=$( sed -n "/^Filename: .*\/${pkg}_/ { s,.*/,,g; s,%3a,:,g; p }" \
	cache/vyatta-dists-mirror/binary-${LH_ARCHITECTURE}/Packages )
    if [[ $pkg =~ linux-image-.* ]] ; then
	if [ $pkg = $VYATTA_LINUX_PKG ] ; then
	    selected_debs_from_vyatta_deb_mirror+=( cache/vyatta-deb-mirror/$deb )
	fi
    elif [ -n "$deb" ] ; then
	selected_debs_from_vyatta_deb_mirror+=( cache/vyatta-deb-mirror/$deb )
    fi
done

rm -f config/chroot_local-packages/*.deb
mkdir -p config/chroot_local-packages

for xdeb in ../pkgs/*.deb ${selected_debs_from_vyatta_deb_mirror[@]} ; do
    deb=${xdeb##*/}
    pkg=${deb%%_*}
    
    if grep -q "^${pkg}-\$" cache/vyatta-pkgs ; then
	continue
    fi

    if [[ "$pkg" == @($chroot_exclude_pattern) ]] ; then
	continue
    fi

    file=`echo config/chroot_local-packages/${pkg}_*.deb`
    if [[ $xdeb == ../pkgs* ]] ; then
	cp -lf ../pkgs/$deb config/chroot_local-packages/$deb
    elif [[ ! "$file" ]]; then
	cp -lf ../../cache/vyatta-deb-mirror/$deb \
	    config/chroot_local-packages/$deb
    fi
done

mk_version_package ()
{
    local savedir="$PWD"
    local etcdir="$savedir"/chroot/opt/vyatta/etc
    local config_src=community
    local tmpdir=/tmp/$$-version
    local vf=$tmpdir/opt/vyatta/etc

    VVERSION=`cat version 2>/dev/null` || true
    case "$VVERSION" in
    [0-9]*)
		config_src=supported
		;;
    "" )
	        VBRANCH=`cat branch 2>/dev/null` || true
		[ "$VBRANCH" ] || VBRANCH=`git-branch|awk '/^\*/ {print $2}'`
		VVERSION=0."$VBRANCH"
		;;
    esac

    BUILTBY=`cat buildby 2>/dev/null` || true
    if [ -z "$BUILTBY" ]
    then
        if [ "$GIT_COMMITTER_EMAIL" ] ; then
    	    BUILTBY=$GIT_COMMITTER_EMAIL
        elif [ "$GIT_AUTHOR_EMAIL" ] ; then
    	    BUILTBY=$GIT_AUTHOR_EMAIL
        else
    	    user_email=`git config user.email 2>/dev/null` || true
    	    if [ "$user_email" ] ; then
    	        BUILTBY=$user_email
    	    elif [ "$SUDO_USER" ] ; then
    	        BUILTBY=$SUDO_USER@$ORGANIZATION
    	    else
    	        BUILTBY=$USER@$ORGANIZATION
    	    fi
        fi
    fi

    mkdir -p $vf/config

    cp templates/$config_src/config.boot.default $vf/.

    cd $tmpdir
    mkdir DEBIAN

    echo I: generating build record
    cat <<-EOF > $vf/iso-build.txt
	Built by :    $BUILTBY
	Built on :    $HUMANTIME
	Build ID :    $BUILDID
	EOF

    # backwards compatible symlink
    ln -nsf iso-build.txt $vf/build.txt
    #echo "$BUILDID">$savedir/iso-label	# is this needed?

    echo I: generating package list
    chroot "$savedir"/chroot /opt/vyatta/bin/save-package-report
    mv $etcdir/deb-versions.txt $vf/.

    ( cd "$savedir"/.. ; git-submodule status 2>/dev/null ) \
         > $vf/iso-submodules.txt
    [ -s $vf/iso-submodules.txt ] || cp "$savedir"/iso-submodules.txt $vf/. 2>/dev/null

    echo vyatta-version ${VVERSION} >>$vf/deb-versions.txt

    echo "Version  :    ${VVERSION}">$vf/version
    echo "Copyright:    2006-2008 Vyatta, Inc.">>$vf/version

    (
	echo "Package: vyatta-version"
	echo "Version: ${VVERSION}"
	echo "Architecture: all"
	echo "Maintainer: Vyatta <debs@vyatta.com>"
	echo "Essential: no"
	echo "Section: base"
	echo "Replaces: vyatta-version, vc-version, vc2-version, devel-version, vyatta-cfg-system"
	echo -n Suggests: 
	<$vf/deb-versions.txt sed -e 's/ *\([^ ]*\)$/(>=\1),/' -e 's/^/ /'
	echo " nano"
	echo Description: "$prefix version file"
	echo " This package sets up the version file and a file containing"
	echo " the list of recommended packages (with the recommended versions)"
    ) >DEBIAN/control

    mkdir ../$$-deb
    dpkg --build . "../$$-deb/vyatta-version_${VVERSION}_all.deb" >/dev/null

    rm -rf $tmpdir
    cd $savedir
    mv /tmp/$$-deb/vyatta-version_${VVERSION}_all.deb config/chroot_local-packages/.
    dpkg -i --root=chroot config/chroot_local-packages/vyatta-version_${VVERSION}_all.deb
    rm -rf /tmp/$$-deb
}

echo I: configuring build
lh_config

cp cache/vyatta-pkgs config/chroot_local-packageslists

find \
    binary_local-includes \
    chroot_local-hooks \
    chroot_local-includes \
    install-gtk_local-includes \
    \! -name \*~ \! -name .\*.swp -print0 | \
    cpio --null --quiet -dump config

## NOTE: the 07-apt hook adds this key during live image build, and
## 	binary install respectively
cp config/chroot_local-includes/vyatta-pubkey.gpg config/binary_local-includes/

if [ ${#deb_sources[@]} -gt 0 ]; then
    echo I: set up custom source repos
    cp -lf ${deb_sources[@]} config/chroot_sources/
fi
 
# clear .stage
# note: this causes all steps to be re-executed. however, the bootstrap stage
# is cached, so the bootstrap step only restores the cached stage.
rm -rf .stage

echo I: building bootstrap
if ! lh_bootstrap; then
  echo E: bootstrap build failed
  exit 1
fi

if [ -d cache/lists ] ; then
    echo I: Restore cached package lists
    ( cd cache && \
	find lists -print0 | \
	cpio --null --quiet -pdmu ../chroot/var/lib/apt )
fi

if ! eval "$use_xen" && ! eval "$use_xendomzero" ; then
    rm -f config/chroot_local-hooks/*xen*
fi

rm -rf chroot/dev/null chroot/dev/zero chroot/dev/random chroot/dev/urandom chroot/dev/ram1
mknod -m 666 chroot/dev/null c 1 3
mknod -m 666 chroot/dev/zero c 1 5
mknod -m 666 chroot/dev/random c 1 9	# fake out /dev/random to be /dev/urandom
mknod -m 666 chroot/dev/urandom c 1 9
mknod -m 666 chroot/dev/ram1 c 1 1

# set up random seed
openssl rand -out chroot/root/.rnd 4096

# mimic lh_chroot_local-packages but install selected vyatta linux package before
# any other local packages
vyatta_chroot_local-packages ()
{
  local pool=chroot/root/pool/local/main
  local dist=chroot/root/dists/local/Release
  declare -a vyatta_linux_debs=( config/chroot_local-packages/linux-*-vyatta*_${LH_ARCHITECTURE}.deb )

  mkdir -p $pool

  if [ ${#vyatta_linux_debs[@]} -gt 0 ] ;then
      cp -lf ${vyatta_linux_debs[@]} $pool/.
  fi

  cp -lf config/chroot_local-packages/!(linux-*vyatta*)_${LH_ARCHITECTURE}.deb \
     config/chroot_local-packages/*_all.deb \
      $pool/.

  ../tools/deb-archive -r local -d $pool/../../..

  cp chroot_local-includes/etc/apt/preferences chroot/etc/apt
  sed -i 's/^Label: Vyatta/Label: Local/' $dist
  cp chroot/etc/apt/sources.list chroot/etc/apt/sources.list.bak
  (
    echo "deb file:///root local main"
    echo "deb http://firebolt.vyatta.com/vyatta-dev islavista main"
    echo deb "$LH_MIRROR_CHROOT_SECURITY" lenny/updates main
    cat chroot/etc/apt/sources.list.bak
  )>chroot/etc/apt/sources.list

  chroot chroot apt-get update
  chroot chroot apt-get -y -f install
  chroot chroot apt-get -y -f install aptitude
  chroot chroot aptitude --allow-untrusted -R -y -f install

  chroot chroot aptitude --allow-untrusted -R -y install \
       `cat cache/vyatta-pkgs` \
	"?name(vyatta)" \
	"?name(-dev)"_ \
	"?name(cpp-)"_ \
	"$VYATTA_LINUX_PKG" \
	openssh-server \
	openswan \
	apt-utils \
	live-initramfs \
	|| exit $?
  sed 's/_/-/' -i cache/vyatta-pkgs	# other tools use apt-get, which doesn't understand _
  sed 's/_/-/' -i config/chroot_local-packageslists/vyatta-pkgs
  chroot chroot aptitude --allow-untrusted -R -f -y install

  # force our current version package
  mk_version_package	# make a partially formed version package
}

# do the steps in lh_chroot
build_chroot ()
{
  echo I: configuring chroot
  lh_chroot_cache restore || return 1
  lh_chroot_proc install || return 1
  lh_chroot_sysfs install || return 1
  lh_chroot_debianchroot install --force || return 1
  lh_chroot_dpkg install || return 1
  lh_chroot_sysv-rc install || return 1
  lh_chroot_hosts install || return 1
  lh_chroot_resolv install || return 1
  lh_chroot_hostname install || return 1
  lh_chroot_apt install || return 1
  echo 'quiet "1";' > chroot/etc/apt/apt.conf.d/03quiet
  vyatta_chroot_local-packages || return 1
  lh_chroot_linux-image install || return 1
  
  test -r live.conf/${LH_DISTRIBUTION} && \
      cp -f live.conf/${LH_DISTRIBUTION} chroot/etc/live.conf

  echo I: customizing chroot
  lh_chroot_preseed || return 1
  lh_chroot_local-preseed || return 1
  lh_chroot_tasks || return 1
  lh_chroot_packageslists || return 1
  lh_chroot_packages || return 1

  lh_chroot_local-packageslists || return 1

  lh_chroot_localization || return 1
  lh_chroot_local-includes || return 1
  lh_chroot_sysvinit || return 1
  lh_chroot_hooks || return 1
  lh_chroot_local-hooks || return 1
  lh_chroot_symlinks || return 1
  lh_chroot_hacks || return 1
  lh_chroot_interactive || return 1

  rm -rf chroot/root/*

  # remove resolv.conf.orig so it doesn't get restored
  rm -f chroot/etc/resolv.conf.orig

  echo I: deconfiguring chroot
  lh_chroot_linux-image remove || return 1
  lh_chroot_apt remove || return 1
  lh_chroot_hostname remove || return 1
  lh_chroot_resolv remove || return 1
  lh_chroot_hosts remove || return 1
  lh_chroot_sysv-rc remove || return 1
  lh_chroot_dpkg remove || return 1
  lh_chroot_debianchroot remove || return 1
  lh_chroot_sysfs remove || return 1
  lh_chroot_proc remove || return 1
  lh_chroot_cache save || return 1

  DOM0_PKGS_URL=http://packages.vyatta.com/vyatta-dev/tmp
  DOM0_KERNEL_PKG=linux-image-2.6.24-19-xen_2.6.24-19.36_amd64.deb
  DOM0_MODULES_PKG=linux-ubuntu-modules-2.6.24-19-xen_2.6.24-19.28_amd64.deb
  if eval "$use_xendomzero" ; then
    # xen dom0 kernel
    (
      cd chroot/root
      rm -f linux-*.deb
      wget $DOM0_PKGS_URL/$DOM0_KERNEL_PKG
      wget $DOM0_PKGS_URL/$DOM0_MODULES_PKG
    )
    chroot chroot dpkg -i /root/$DOM0_KERNEL_PKG /root/$DOM0_MODULES_PKG
    rm -f chroot/root/linux-*.deb

    # fix debian xen setup
    chroot chroot ln -sf ../lib/xen-common/bin/xen-utils-wrapper \
      /usr/sbin/tapdisk
  fi

  local kernelname=`cd chroot/lib/modules;echo *`
  if [ "$kernelname" ]
  then
     chroot chroot depmod -a `cd chroot/lib/modules;echo *`
  else
     echo "Missing kernel module"
     return 1
  fi

  # restore /dev/random
  rm -rf chroot/dev/random
  mknod -m 666 chroot/dev/random c 1 8
}

echo I: building chroot
if ! build_chroot; then
  echo E: chroot build failed
  exit 1
fi

mk_version_package

# add config version string to default config file
chroot chroot sh -c \
  '/opt/vyatta/sbin/vyatta_current_conf_ver.pl \
   >> /opt/vyatta/etc/config.boot.default'

# remove backup files for ISO
rm -f chroot/etc/*.vyatta-save chroot/etc/*/*.vyatta-save

if [ -f chroot/usr/bin/ldd.REAL ]; then
    echo I: restoring ldd
    rm -f chroot/usr/bin/ldd
    mv chroot/usr/bin/ldd.REAL chroot/usr/bin/ldd 
fi
if [ -f chroot/sbin/ldconfig.REAL ]; then
    echo I: restoring ldd/ldconfig
    rm -f chroot/sbin/ldconfig
    mv chroot/sbin/ldconfig.REAL chroot/sbin/ldconfig
fi

echo I: Cache Package files
( cd chroot/var/lib/apt && \
    find lists -print0 | \
    cpio --null --quiet -pdmu ../../../../cache )

>chroot/tmp/mksquashfs.exclude
for b in chroot/var/lib/apt/lists/*_dists_* ; do
    echo ${b#chroot/}	>> chroot/tmp/mksquashfs.exclude
done
#for b in chroot/boot/initrd.img-* ; do
#    echo ${b#chroot/}	>> chroot/tmp/mksquashfs.exclude
#done

# exclude more files
cat <<EOF >> chroot/tmp/mksquashfs.exclude
etc/apt/preferences
etc/resolv.conf
var/log/bootstrap.log
var/log/dpkg.log
EOF

## restore apt/preferences for binary build
cp -lf chroot_local-includes/etc/apt/preferences chroot/etc/apt

echo I: building binary
if ! lh_binary ; then
  echo E: binary build failed
  exit 1
fi

ln -nsf binary.iso livecd-"$BUILDID".iso

# this is the wrong version package
rm -f ./cache/packages_local-packageslists/vyatta-version_*.deb

echo I: Done

# Local Variables:
# mode: shell-script
# sh-indentation: 4
# End:
