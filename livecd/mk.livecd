#!/bin/bash

declare -x LH_APT
declare -x LH_BOOTLOADER
declare -x LH_BOOTSTRAP
declare -x LH_BOOTSTRAP_FLAVOUR
declare -x LH_CHROOT_FILESYSTEM
declare -x LH_DISTRIBUTION
declare -x LH_HOSTNAME
declare -x LH_INITRAMFS
declare -x LH_ISO_APPLICATION
declare -x LH_ISO_PUBLISHER
declare -x LH_ISO_VOLUME
declare -x LH_LINUX_PACKAGES
declare -x LH_LINUX_FLAVOURS
declare -x LH_MEMTEST
declare -x LH_MIRROR_BINARY
declare -x LH_MIRROR_BOOTSTRAP
declare -x LH_PACKAGES_LISTS
declare -x LH_SECTIONS
declare -x LH_UNION_FILESYSTEM

declare -a exclude_packages=( \
                            )
declare -a include_packages=( \
                              ${FETCH_PKGS} \
                            )
declare -a local_packages=( \
                            ${BUILD_PKGS} \
                          )
declare pkglistdir=config/chroot_local-packageslists

if [ -r lh_config/${TARGET_DIST}-config ]; then
  . lh_config/${TARGET_DIST}-config
fi

. lh_config/default-config

# process command line variable overrides
for arg ; do
    case "$arg" in
	--*=* )
	    eval "${arg#--}"
	    ;;
	*=* )
	    eval "$arg"
	    ;;
    esac
done

# for Xen DomU target, donot use either fetched or built Vyatta kernel pkg
# instead, use the xen kernel/module pkgs from the target distribution
if [ -n "$XEN" ] ; then
    for (( i=0; i<${#include_packages[@]}; i++ )) ; do
	[[ "${include_packages[i]}" == linux-image-* ]] && \
	    unset include_packages[i]
    done
    for (( i=0; i<${#local_packages[@]}; i++ )) ; do
	[[ "${local_packages[i]}" == linux-image-* ]] && \
	    unset local_packages[i]
    done
    LH_LINUX_PACKAGES=linux-image
    LH_LINUX_FLAVOURS=xen
fi

: ${LH_APT:=apt}
: ${LH_BOOTLOADER:=grub}
: ${LH_BOOTSTRAP:=debootstrap}
: ${LH_BOOTSTRAP_FLAVOUR:=minimal}
: ${LH_CHROOT_FILESYSTEM:=squashfs}
[[ -z "$LH_DISTRIBUTION" && -n "$TARGET_DIST" ]] && \
    LH_DISTRIBUTION=$TARGET_DIST
: ${LH_HOSTNAME:=vyatta}
: ${LH_INITRAMFS:=live-initramfs}
: ${LH_ISO_APPLICATION:="Vyatta OFR"}
: ${LH_ISO_PUBLISHER:="Vyatta Inc.; http://www.vyatta.com/;"}
: ${LH_ISO_VOLUME:="Vyatta OFR Live $(date +%Y%m%d-%H:%M)"}
: ${LH_LINUX_PACKAGES:=none}
: ${LH_LINUX_FLAVOURS:=${VYATTA_LINUX_FLAVOR}}
: ${LH_MEMTEST:=disabled}
[[ -z "$LH_MIRROR_BINARY" && -n "$mirror_binary" ]] && \
    LH_MIRROR_BINARY=$mirror_binary
[[ -z "$LH_MIRROR_BOOTSTRAP" && -n "$mirror_bootstrap" ]] && \
    LH_MIRROR_BOOTSTRAP=$mirror_bootstrap
: ${LH_PACKAGES_LISTS:=none}
[[ -z "$LH_SECTIONS" && -n "$dist_sections" ]] && \
    LH_SECTIONS=$dist_sections
: ${LH_UNION_FILESYSTEM:=unionfs}

if [[ $LD_PRELOAD == *libfakeroot-sysv.so* ]]; then
    # we are in fakeroot
    LH_OPTIONAL_FAKEROOT=--fakeroot
else
    LH_OPTIONAL_FAKEROOT=
fi

set_conf_var ()
{
  local conf=$1
  local var=$2
  local val=$3
  sed -i "s/^$var=\".*\"/$var=\"$val\"/" config/$conf
}

if [ ! -d config ]; then
  echo I: configuring build
  lh_config ${LH_OPTIONAL_FAKEROOT}

  set_conf_var "bootstrap" "LH_BOOTSTRAP_INCLUDE" ${bootstrap_include}
  set_conf_var "bootstrap" "LH_BOOTSTRAP_EXCLUDE" ${bootstrap_exclude}

  # set up custom repo(s)
  if ls deb_sources/${TARGET_DIST}-*bootstrap* >& /dev/null; then
    cp deb_sources/${TARGET_DIST}-*bootstrap* config/chroot_sources/
  fi
 
  # set up custom pkg list(s)
  echo "# vyatta packages" > ${pkglistdir}/vyatta-pkgs
  cat deb_lists/default-pkglist >> ${pkglistdir}/vyatta-pkgs
  if ls deb_lists/${TARGET_DIST}-* >& /dev/null; then
    for list in deb_lists/${TARGET_DIST}-*; do
      cat $list >> ${pkglistdir}/vyatta-pkgs
    done
  fi

  # set up binary hook(s)
  cp hooks_binary/default-hooks config/binary_local-hooks/
fi

# set up packages to be fetched
if (( ${#include_packages[@]} > 0 )); then
  echo "${include_packages[*]}" >> ${pkglistdir}/vyatta-pkgs
fi

# set up locally-built packages
rm -f config/chroot_local-packages/*
if (( ${#local_packages[@]} > 0 )); then
  for bpkg in ${local_packages[@]}; do
    cp -p ../*/${bpkg}*.deb config/chroot_local-packages/
  done
fi

if [ "$ISO_FAST" == "yes" ]; then
  # do a "fast" build. just install the local packages and then do lh_binary.
  # there may be problems if, for example, dependencies have changed, etc.
  rm -f .stage/chroot_local-packages .stage/binary_*
  
  # when installing local packages, set vyatta archive priority to -1
  # so that local packages are always installed.
  cat >chroot/etc/apt/preferences <<'EOF'
Package: *
Pin: release l=Vyatta
Pin-Priority: -1
EOF
  echo I: installing local packages
  lh_chroot_local-packages || return 1
  >chroot/etc/apt/preferences

  echo I: building binary
  if ! lh_binary; then
    echo E: binary build failed
    exit 1
  fi

  exit 0
fi

# clear .stage
# note: this causes all steps to be re-executed. however, the bootstrap stage
# is cached, so the bootstrap step only restores the cached stage.
rm -rf .stage

echo I: buidling bootstrap
if ! lh_bootstrap; then
  echo E: bootstrap build failed
  exit 1
fi

if [ -d cache/lists ] ; then
    echo I: Restore cached package lists
    cp -a cache/lists chroot/var/lib/apt/
fi

if [ -n "$XEN" ] ; then
    echo I: Disabling TLS
    mv chroot/lib/tls chroot/lib/tls.disabled
fi

# do the steps in lh_chroot
build_chroot ()
{
  echo I: configuring chroot
  lh_chroot_cache restore || return 1
  lh_chroot_proc install || return 1
  lh_chroot_sysfs install || return 1
  lh_chroot_debianchroot install || return 1
  lh_chroot_dpkg install || return 1
  lh_chroot_sysv-rc install || return 1
  lh_chroot_hosts install || return 1
  lh_chroot_resolv install || return 1
  lh_chroot_hostname install || return 1
  lh_chroot_apt install || return 1
  lh_chroot_sources install || return 1

  # disable update-initramfs so that it isnot rerun in each pkg postinst
  # instead, run it once at the end
  mv chroot/usr/sbin/update-initramfs chroot/usr/sbin/update-initramfs.real
  ln -s ../../bin/true chroot/usr/sbin/update-initramfs

  lh_chroot_linux-image install || return 1
  
  echo I: customizing live-initramfs
  if [ -x live_config/${TARGET_DIST}-config ]; then
    ./live_config/${TARGET_DIST}-config
  fi
  
  if [ -n "$XEN" ] ; then
      echo I: Remove initramfs console, thermal, and splash hooks
      rm -f chroot/usr/share/initramfs-tools/hooks/{console_setup,console_tools,thermal,usplash}
      rm -f chroot/usr/share/initramfs-tools/scripts/init-top/{framebuffer,console_setup}
  fi

  echo I: customizing chroot
  lh_chroot_preseed || return 1
  lh_chroot_local-preseed || return 1
  lh_chroot_tasks || return 1
  lh_chroot_packageslists || return 1
  lh_chroot_packages || return 1
 
  # we do local packages first since they are "newer".
  # when installing local packages, set vyatta archive priority to -1
  # so that local packages are always installed.
  cat >chroot/etc/apt/preferences <<'EOF'
Package: *
Pin: release l=Vyatta
Pin-Priority: -1
EOF
  lh_chroot_local-packages || return 1
  # now set vyatta archive priority to 50 so that packages there will be
  # installed if not installed locally
  cat >chroot/etc/apt/preferences <<'EOF'
Package: *
Pin: release l=Vyatta
Pin-Priority: 50
EOF
  lh_chroot_local-packageslists || return 1
  >chroot/etc/apt/preferences

  lh_chroot_localization || return 1
  lh_chroot_local-includes || return 1
  lh_chroot_sysvinit || return 1
  lh_chroot_hooks || return 1
  lh_chroot_local-hooks || return 1
  lh_chroot_symlinks || return 1
  lh_chroot_hacks || return 1
  lh_chroot_interactive || return 1
 
  echo I: deconfiguring chroot
  lh_chroot_linux-image remove || return 1
  lh_chroot_sources remove || return 1
  lh_chroot_apt remove || return 1
  lh_chroot_hostname remove || return 1
  lh_chroot_resolv remove || return 1
  lh_chroot_hosts remove || return 1
  lh_chroot_sysv-rc remove || return 1
  lh_chroot_dpkg remove || return 1
  lh_chroot_debianchroot remove || return 1
  lh_chroot_sysfs remove || return 1
  lh_chroot_proc remove || return 1
  lh_chroot_cache save || return 1

  rm -f chroot/usr/sbin/update-initramfs
  mv chroot/usr/sbin/update-initramfs.real chroot/usr/sbin/update-initramfs
  echo I: Update initramfs
  rm -f chroot/boot/initrd.img*
  chroot chroot update-initramfs -t -u
}

echo I: buidling chroot
if ! build_chroot; then
  echo E: chroot build failed
  exit 1
fi

echo I: removing excluded packages
if (( ${#exclude_packages[@]} > 0 )); then
  chroot chroot apt-get -y --force-yes remove ${exclude_packages[@]}
fi

echo I: setting root password to vyatta
sed -i 's/root::/root:$1$Tulceur3$8MsrChto8vS7Q6XkZGM0k1:/' chroot/etc/shadow
echo I: setting default hostname to vyatta
echo vyatta > chroot/etc/hostname
echo I: resetting /etc/resolv.conf
>chroot/etc/resolv.conf
echo I: creating /etc/issue
echo 'Welcome to Vyatta - \n \l' > chroot/etc/issue
echo I: creating /etc/issue.net
echo 'Welcome to Vyatta  ' > chroot/etc/issue.net
echo I: creating /etc/fstab
cat > chroot/etc/fstab <<EOF
# <file system>	<mount point>		<type>  <options>	<dump>  <pass>
tmpfs		/opt/vyatta/config	tmpfs	nosuid,nodev	0	0
EOF

if ! grep -q '/etc/bash_completion' chroot/root/.bashrc; then
  # enable completion for root (enabled by default for other users)
  cat <<'EOF' >> chroot/root/.bashrc

# enable programmable completion features (needed for CLI auto-completion)
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi
EOF
fi

echo I: restoring ldd/ldconfig
if [ -f chroot/usr/bin/ldd.REAL ]; then
  rm -f chroot/usr/bin/ldd
  mv chroot/usr/bin/ldd.REAL chroot/usr/bin/ldd 
fi
if [ -f chroot/sbin/ldconfig.REAL ]; then
  rm -f chroot/sbin/ldconfig
  mv chroot/sbin/ldconfig.REAL chroot/sbin/ldconfig
fi

if [ -n "$XEN" ] ; then
    echo I: Complete Xen DomU setup...
    echo I: Remove hwclock and non-serial console init
    rm -f chroot/etc/rc?.d/[SK]*{hwclock*,keyboard-setup,console-setup,console-screen.sh}
fi

if [ ! -r chroot/etc/default/locale ] ; then
    echo I: Set default locale
    cat <<-EOF >chroot/etc/default/locale
	LANG=en_US.UTF-8
	LC_ALL=C
	EOF
fi

if [ -r chroot/etc/event.d/tty1 ] ; then
    echo I: Delay getty until rcX completes
    sed -i 's/start on runlevel /start on stopped rc/' \
	chroot/etc/event.d/tty[1-6]
fi

echo I: Cache Package files
cp -a chroot/var/lib/apt/lists cache/

echo I: building binary
if ! lh_binary; then
  echo E: binary build failed
  exit 1
fi

echo I: Done

