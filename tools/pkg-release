#!/bin/bash

usage () {
  cat<<EOF
Usage: pkg-release [-i] [-n] [-p] [-h] [<version>]

  This script is run inside a debianized git source repository to make a new
  "release". It adds and commits an entry for <version> in debian/changelong
  on the current branch, creates a git tag "debian/<version>", and pushes the
  new changelog and tag to the origin.
  
  Note that all arguments are optional. If "<version>" is not specified, the
  version will be automatically incremented by git-dch using its versioning
  heuristics.

  The following options are available:

    -i: Edit the changelog interactively.

    -n: Do not push the changes.

    -p: Push the changes without confirmation.

    -h: Show this help text.

EOF
  exit 1
}

if [ ! -f debian/changelog ]; then
  usage
fi

edit=false
dopush=true
confirm=true
while getopts inph opt
do
  case $opt in
    i) edit=true
       ;;
    n) dopush=false
       ;;
    p) confirm=false
       ;;
    *) usage
       ;;
  esac
done

ver=${@:$OPTIND:1}

echo "The following options are selected:"
if eval "$edit"; then
  echo "  Edit changelog interactively"
else
  echo "  Use automatically generated changelog"
fi
if eval "$dopush"; then
  echo "  Changes WILL be pushed to origin repo automatically"
else
  echo "  Changes will NOT be pushed to origin repo"
fi
if [ -z "$ver" ]; then
  echo "  Use automatically generated version string"
else
  echo "  Use version string \"$ver\""
fi
if eval "$confirm"; then
  echo -n "Proceed? (y/N) "
  read resp
  case "$resp" in
    y* )
      ;;
    * )
      exit 1
      ;;
  esac
fi

if [ -z "$DEBFULLNAME" ]; then
  DEBFULLNAME=$(git config user.name)
fi
if [ -z "$DEBEMAIL" ]; then
  DEBEMAIL=$(git config user.email)
fi
export DEBFULLNAME
export DEBEMAIL

branch=$(git branch | sed -n '/^\* /s/^\* //p')
export EDITOR=true
if eval "$edit"; then
  export EDITOR=vi
fi

if [ -z "$ver" ]; then
  # no version specified. use git-dch directly.
  if ! git dch --debian-branch="$branch" --release; then
    echo git-dch failed
    exit 1
  fi
  ver=$(dpkg-parsechangelog | sed -n 's/^Version: //p')
else
  # use specified version.
  if ! git dch --debian-branch="$branch" --release --new-version="$ver"; then
    echo git-dch failed
    exit 1
  fi
fi

if ! (git commit -m "$ver" debian/changelog \
      && git tag -a -m "$ver" "debian/$ver"); then
  usage
fi

if eval "$dopush"; then
  # push may return failure if, e.g., it can't push "master"
  git push --tags || true
  git push || true
fi

