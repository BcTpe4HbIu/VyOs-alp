#!/bin/bash

usage () {
  cat<<EOF
Usage: pkg-release [-i] [-n] [-p] [-h] [<version>]

  This script is run inside a debianized git source repository to make a new
  "release". It adds and commits an entry for <version> in debian/changelong
  on the current branch, creates a git tag "debian/<version>", and pushes the
  new changelog and tag to the origin.
  
  Note that all arguments are optional. If "<version>" is not specified, the
  version will be automatically incremented by git dch using its versioning
  heuristics.

  The following options are available:

    -i: Edit the changelog interactively.
    -n: Do not push the changes.
    -p: Push the changes without confirmation.
    -q: Quiet don't show actions
    -h: Show this help text.

EOF
  exit 1
}

if [ ! -f debian/changelog ] || [ ! -f .git/config ]; then
  usage
fi

if [ -z "$DEBFULLNAME" ]; then
  DEBFULLNAME=$(git config user.name)
fi
if [ -z "$DEBFULLNAME" ]; then
  DEBFULLNAME=$GIT_COMMITTER_NAME
fi
if [ -z "$DEBEMAIL" ]; then
  DEBEMAIL=$(git config user.email)
fi
if [ -z "$DEBEMAIL" ]; then
  DEBEMAIL=$GIT_COMMITTER_EMAIL
fi
export DEBFULLNAME
export DEBEMAIL
user=${DEBEMAIL%%@*}
url=$(git config remote.origin.url \
      | sed "s@http://\(\(git\|suva\)[^/]\+\)/@\1:/git/@; \
             s@http://\(phuket[^/]\+\)/@\1:/usr/local/git/@")
if [[ $url == *@* ]]; then
  user=${url%%@*}
  url=${url##*@}
fi
if [ -z "$user" ] || [[ $url == http://* ]]; then
  cat <<EOF
URL "$url" cannot be used for git push.
Please push manually using the following commands after this script finishes:
  git push <url>
  git push --tags <url>

EOF
  dopush=false
else
  dopush=true
fi
if [[ $url != /* ]]; then
  url="$user@$url"
fi

edit=false
confirm=true
quiet=
while getopts inphq opt
do
  case $opt in
    i) edit=true    ;;
    n) dopush=false ;;
    p) confirm=false;;
    q) quiet="-q"   ;;
    *) usage        ;;
  esac
done

ver=${@:$OPTIND:1}

if [ -n "$ver" ] && ! echo $ver | grep -q '^[0-9]'; then
  echo "Version string should start with a number."
  exit 1
fi

if [ -z "$quiet" ]; then
  echo "The following options are selected:"
  if eval "$edit"; then
    echo "  Edit changelog interactively"
  else
    echo "  Use automatically generated changelog"
  fi
  if [ -z "$ver" ]; then
    echo "  Use automatically generated version string"
  else
    echo "  Use version string \"$ver\""
  fi
  if eval "$dopush"; then
    echo "  Changes WILL be pushed to origin repo automatically"
    echo "    (origin URL is \"$url\")"
    if eval "$confirm"; then
      echo -n "Proceed? (y/N) "
      read resp
      case "$resp" in
      y* ) ;;
      * ) exit 1 ;;
      esac
    fi
  else
    echo "  Changes will NOT be pushed to origin repo"
  fi
fi

# pull before doing anything
if ! git pull $quiet ; then
  echo git pull failed
  exit 1
fi
branch=$(git branch | sed -n '/^\* /s/^\* //p')

# turn off editor called from git dch
if ! eval $edit; then 
    export VISUAL=
    export EDITOR=true
fi

if [ -z "$ver" ]; then
  # no version specified. use git dch directly.
  if ! git dch --debian-branch="$branch" --release; then
    echo git dch failed
    exit 1
  fi
  ver=$(dpkg-parsechangelog | sed -n 's/^Version: //p')
else
  # use specified version.
  if ! git dch --debian-branch="$branch" --release --new-version="$ver"; then
    echo git dch failed
    exit 1
  fi
fi

if ! (git commit $quiet -m "$ver" debian/changelog \
      && git tag -a -m "$ver" "debian/$ver"); then
  usage
fi

if eval "$dopush"; then
  # push may return failure if, e.g., it can't push "master"
  git push --tags $url || true
  git push $url || true
fi

