#!/bin/bash

progname=${0##*/}
shopt -s nullglob
cd pkgs

info=echo
trace=
git="git_status"

declare -a cloned=( */.git pkgs/*/.git )
declare -a submodule=( ${cloned[@]%/*} )

while [ $# -gt 0 ] ; do
    case "$1" in
	-h | --help )
	    cat <<-EOF
Usage: $progname [-n | -q] COMMAND [ SUBMODULE... ]
Option:
  -n		DonÂ´t actually execute anything,
		just show what would be done.
  -q		Quiet, don't print progress info

COMMAND:
  branch	Show current branch
  branch-av	Show all branches
  clean		Clean tree of non-indexed files
  clean-n	Show files to be cleaned
  diff		Show diff from HEAD to tree
  diff-cached	Show diff from HEAD to index cache
  fetch		Fetch updates
  lsmods	ls-files -m
  merge		merge current branch with origin/BRANCH
  pull		fetch and merge current branch 
  push		push commits upstream
  status	Show status (default)
  update-mods	Update index for all modified files

SUBMODULE:
  If no submodule given, perform git-COMMAND on all checked-out submodules

EOF
	    exit 0;;
	-n )
	    trace=echo
	    shift;;	    
	-q )
	    info='#'
	    shift;;
	  branch \
	      | branch-av \
	      | clean \
	      | clean-n \
	      | diff \
	      | diff-cached \
	      | fetch \
	      | lsmods \
	      | merge \
	      | pull \
	      | push \
	      | status \
	      | checkout \
	      | update-mods )
	      git=git_$1
	      shift;;
	* )
	    submodule=( $@ )
	    break;;
    esac
done

git_pull ()
{
    git-pull
}

git_push ()
{
    git-push
}

git_diff ()
{
    git-diff
}

git_branch-av ()
{
    git-branch -a -v
}

git_clean-n ()
{
    git-clean -n
}

git_lsmods ()
{
    git-ls-files -m
}

get_branch()
{
    git-branch|grep '^\* '|sed 's/(no branch)/NOBRANCH/'|awk '{ print $2 }'
}

guess_branch()
{
    local branch

    branch=`get_branch`
    [ "$branch" = NOBRANCH -o ! "$branch" ] && branch="$SUPERBRANCH"
    [ "$branch" ] || branch=master
    echo "$branch"
}

get_sha()
{
    git-branch|grep '^\* '|awk '{ print $3 }'
}

git_checkout()
{
	if ! git-checkout "$SUPERBRANCH" 2>/dev/null
	then
		echo No branch "$branch"
	fi
}

git_fetch ()
{
    local modulename=`basename "$PWD"`

    git-fetch -q 2>/dev/null
    if ! (git-status|head -3|grep '^nothing to commit' >/dev/null) ; then
	echo There are uncommited changes.
    fi

    (
    if cd ../../.git 2>/dev/null
    then
	parent=`cd .. && git-submodule status pkgs/"$modulename"|sed 's/\(.\).*/\1/'`;
	case "$parent" in
	    '+' ) echo This submodule has a commit not in the parent.;;
	    '-' ) echo This submodule is not up to date.;;
	esac
    fi
    )

    sha=`get_sha`
    in_repo=`git-log -1 -- "$sha"`
    if [ ! "$in_repo" ]; then
	echo A local commit is not in the shared repo.
    else
	branch=`guess_branch`
	changed=`git-diff "$branch" origin/"$branch"|head -1`
	if [ "$changed" ]; then
	    echo Local branch is out of sync with shared repo.
	fi
    fi
}

git_diff-cached ()
{
    git-diff --cached
}

git_update-mods ()
{
    git-ls-files -m | git-update-index --stdin
}

git_status()
{
	git-status|grep -v -e '^nothing to commit' -e '^# On branch '
}

SUPERBRANCH=`get_branch`
eval $info ========= . =========
eval $trace $git
for (( i=0; i<${#submodule[@]}; i++)) ; do
    eval $info ========= ${submodule[i]} =========
    ( cd ${submodule[i]} ; eval $trace $git )
done
