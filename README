VyOS ISO Build Procedures

    This document describes how to build a VyOS ISO image. The most
    recent version of this document is the top-level README file from 
    the "latest" branch of the "build-iso" git source repository.


Build Host Setup

    The current VyOS ISO build requires a Debian "squeeze"-based system.
    As of now, "squeeze" is the Debian "stable" release. Therefore, to
    install a minimal squeeze system, download a squeeze installer "netinst"
    or "businesscard" ISO image from the following Debian page:

      http://www.debian.org/releases/squeeze/debian-installer/

    The supported architectures currently include "i386" and "amd64".
    During the installation, choose "Standard system utilities" when
    selecting the software to be installed (note that this is the minimal
    requirements and one can certainly install more packages).

    After the installation and reboot, your "apt" sources.list file should
    be configured to use the Debian mirror that you selected during the
    installation. In order to build the Vyatta packages and the ISO,
    install the following packages using "apt-get" or "aptitude".

      git            # Required, for cloning the source
      autoconf       # Required, for generating build scripts
      dpkg-dev       # Required, used in build scripts
      live-helper    # Required, for ISO build
      syslinux       # Required, for ISO build
      genisoimage    # Required, for ISO build
      ssh            # Optional, for cloning over SSH
      sudo           # Optional, ISO build requires root privileges

    Now install the VyOS package repository GPG key.

      wget -O - http://packages.vyos.net/vyos-pubkey.gpg  | sudo apt-key add -

    You will also need to download and install the latest "squashfs-tools"
    package from the VyOS package repository. For example, for
    the "hydrogen" branch and "amd64" architecture, the package can be
    installed as follows (note that the version of the package may be
    different since the "unstable" package repository contains the latest
    development packages).

      wget http://packages.vyos.net/vyos/pool/main/s/squashfs/squashfs-tools_4.1+vyatta-9+hydrogen1_amd64.deb
      sudo dpkg -i squashfs-tools_4.1+vyatta-9+hydrogen1_amd64.deb

    Then put the following in "/etc/apt/preferences.d/squashfs-tools"
    to "pin" the version of the squashfs-tools package (which ensures
    that the Vyatta package will be used instead of the one from Debian).

      cat >| /etc/apt/preferences.d/squashfs-tools <<EOF
Package: squashfs-tools
Pin: version 4.*
Pin-Priority: 1001
EOF

Getting "build-iso" Source

    The VyOS ISO builder consists of scripts and config files
    maintained as a git repository named "build-iso". First, clone
    the build-iso git repository.

	git clone https://github.com/vyos/build-iso.git

    This will create the source tree in the directory "build-iso".
    (At this point, you might want to switch to reading
    ./build-iso/README, which is the most recent version
    of the file which you are reading now:-)

    Our git repositories have branches, which usually correspond to
    different releases. To switch to a particular branch (let's call
    it BRANCH), do the following.

	cd build-iso
	git checkout --track -b BRANCH origin/BRANCH


Build ISO

    To build a VyOS ISO, do the following in the "build-iso" directory
    (which has been set up as described in the previous section).

	export PATH=/sbin:/usr/sbin:$PATH
	autoreconf -i
	./configure
        sudo make iso

    The end results is the following livecd ISO image.

	livecd/binary.iso

    Note that the above build process uses the pre-built binary packages
    from the VyOS package repository, which contains the
    latest development packages updated in real time (i.e., they are the
    exact same packages used in Vyatta internal development build).

    If you want to make modifications to one or more packages, you will
    need to get the source of the submodule(s) that you want to change,
    make the changes, build the submodules, and then build a new ISO to
    include the new packages. This is discussed in the next section.


Build Host Setup for Building Submodules

    Before building any submodules, you will need to install the following
    Vyatta-specific packages on the build host.

    From "Debian wheezy" install the following packages (similarly, they are
    available from Debian mirrors):
      libmnl0 libmnl-dev

    From VyOS package repository install the following packages:
      iptables iptables-dev linux-vyatta-kbuild
      libsnmp15 libsnmp-dev libsnmp-perl libsnmp-base
      libcap-dev libcap2 libvyatta-cfg-dev libvyatta-cfg1
      libdaq0 libdaq-dev
     
    The location of the VyOS package repository depends on the
    source branch. For example, for the "pacifica" branch, the amd64
    "iptables" package in the "unstable" package repository can be downloaded
    from the following URL (note that the unstable package repository is
    updated in real time, so latest version may be different from the version
    below):

      http://packages.vyatta.com/vyatta-dev/pacifica/unstable/pool/main/iptables_1.4.10+vyatta+5_amd64.deb

    After downloading the packages listed above, they can be installed
    using "dpkg".

    Then put the following in "/etc/apt/preferences" to "pin" the version of
    the libcap-dev and libcap2 package (which ensures that the Vyatta package
    will be used instead of the one from Debian).

      cat >| /etc/apt/preferences.d/libcap-dev <<EOF
Package: libcap-dev
Pin: version 2.*
Pin-Priority: 1001
EOF

      cat >| /etc/apt/preferences.d/libcap2 <<EOF
Package: libcap2
Pin: version 2.*
Pin-Priority: 1001
EOF
    

Getting Submodules Source and Building

    Note that the "build-iso" git repository contains a number of
    submodules in the "pkgs/" subdirectory. To get the source for a
    submodule, do the following in the "build-iso" directory (replace
    "SUBMODULE" with the name of the module, e.g., "vyatta-cfg-quagga").

      git submodule init
      git submodule update pkgs/SUBMODULE

    The above will clone the source of the submodule into the
    "pkgs/SUBMODULE" directory. Note that the submodule needs to be on
    the same branch as "build-iso", so do the following (replace
    "BRANCH" with the branch name you used for build-iso).

      cd pkgs/SUBMODULE
      git checkout --track -b BRANCH origin/BRANCH

    In most cases, you will only update (i.e., clone) the submodule(s)
    that you are going to change. If you want to clone all submodules,
    do the following.

      git submodule update

    Remember to create and checkout the same working branch for all
    submodules.


Build submodules

    When you do a "make", the build system will build the binary packages
    for all cloned submodules and include them in the ISO (pre-built
    packages from the Vyatta "unstable" package repository will be used
    for the submodules that are not cloned). If you want to work with
    specific submodules, you can use the commands listed below.

    Using make targets

      There are a number of top-level make targets for working with
      submodules. The commands below use submodule "vyatta-cfg" as an
      example.

      To build ".deb" packages for the vyatta-cfg submodule (equivalent to
      "debuild -i -b -uc -us -nc"):

        make vyatta-cfg

      To clean the build for the vyatta-cfg submodule (equivalent to
      "debuild clean"):

        make clean-vyatta-cfg

      To do a "release" for the vyatta-cfg submodule (equivalent to
      "pkg-release -p", i.e., auto-generate everything and no confirmation):

        make release-vyatta-cfg

    Using submod-mk script

      The submod-mk script in tools/ can also be used to work with submodules.
      To build binary packages for cloned submodule(s),

        tools/submod-mk { --all | SUBMODULE... }

      To build binary and source packages for submodule(s),

        tools/submod-mk --source { --all | SUBMODULE... }

      To build signed binary and source packages for submodule(s),

        tools/submod-mk --signed-source { --all | SUBMODULE... }

      To clean files generated during submodule build,

        tools/submod-clean SUBMODULE...

      To clean files generated during all submodule builds,

        tools/submod-clean

      To also clean the submodule build stage(s),

        tools/submod-clean -d [ SUBMODULE... ]

      To clean the source tree of submodules to skip subsequent builds,

        tools/submod-clean -g [ SUBMODULE... ]

      This retains the local bare git repository for quicker updates.

Changes

    If you want to share your changes, there are two options:

    1. Email patches
        Use "git format-patch -${number of commits}" command. It will produce
        one or more patch files in your repo directory. Email these patches to
        maintainers@vyos.net or (better) add them to the corresponding bug on
        http://bugzilla.vyos.net as attachments.

    2. Fork the submodule on github and make pull request.

Updates using git

    Update the super-module.

	git pull
	git submodule init

    To update all modules, you can use:

	tools/submod-git pull

    Or for the paranoid

	tools/submod-git fetch
	git whatchanged HEAD..origin/master
	git merge

    To see which checked-out submodules have upstream modifications,

	git status		# search for changes in pkgs/

    Get the "from" and "to" commit ids (SHAs) with,

	git diff pkgs/SUBMODULE

    This will produce output something like,

	diff --git a/pkgs/vyatta-cfg-quagga b/pkgs/vyatta-cfg-quagga
	index 78124a9..fca1739 160000
	--- a/pkgs/vyatta-cfg-quagga
	+++ b/pkgs/vyatta-cfg-quagga
	@@ -1 +1 @@
	-Subproject commit 78124a9754efe0bda1d9c827c593c5e0635fec3c
	+Subproject commit fca1739f1985c2ba8d6316b1882365f5e26245cd

    To review what changed between these SHAs,

	cd pkgs/SUBMODULE
	git whatchanged FROM_SHA TO_SHA

    To merge these submodule changes,

	git merge
	cd ../..
	git submodule update

    The "git status" for this submodule should now be clean. Iterate
    through the other updated submodules, then rebuild the ISO.
